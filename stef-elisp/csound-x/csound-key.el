;;; -*- auto-recompile: t -*-

;;; csound-key.el --- musical phrases areas in CSD

;; Keywords: csound

;; This file is not part of GNU Emacs.
;; 
;; csound-key.el is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; csound-key.el is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to
;; the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Author: Stéphane Rollandin <hepta@zogotounga.net>
;;---------

;;; Commentary:
;;-------------

;;    full documentation here:
;;    http://www.zogotounga.net/comp/csoundx.html

;;
;;; Installation:
;;                  
;; ==========================================================
;; this file should be installed through the csound-x package
;; ==========================================================
;;

;; last modified February 9, 2012

;;; Code:

(require 'keykit-interaction nil t)

(defcustom cscsd-key-midi-options "-W -TF "
  "Options for processing a midi file generated by a <..Phrase> area"
  :type 'string
  :group 'csound-csd)

(defcustom cscsd-key-decay 3
  "Decay time in seconds to be added to the duration of a MIDI file
generated from a <..Phrase> area"
  :type 'integer
  :group 'csound-csd)

(defun cscsd-insert-KeyPhrase (&optional name phrase)
  "Insert a <KeyPhrase> area at the beginning of the buffer, associated to
keyword NAME"
  (interactive "sKeyPhrase name: ")
  (cscsd-go-before-cssynth)
  (save-excursion
    (unless (search-forward "MidiPhraseDuration" nil t)
      (goto-char
       (cscsd-define-macro "MidiPhraseDuration" 'sco ""))
      (insert ";f0 $MidiPhraseDuration.\n")
      (forward-line -2)
      (insert ";")))
  (insert "<KeyPhrase label=\"" name "\">\n"
	  "KeyPhrase=")
  (save-excursion 
    (insert (or phrase "''") "\n</KeyPhrase>\n\n"))
;  (when (and (boundp mmm-mode) mmm-mode)
;      (cscsd-turn-mmm-on))
)


(defun cscsd-insert-phrase (&optional name phrase)
  "Insert a <Phrase> area at the beginning of the buffer, associated to 
keyword NAME for PHRASE"
  (interactive "sPhrase name: ")
  (cscsd-delete-mphrase name)
  (cscsd-go-before-cssynth)
  (save-excursion
    (unless (search-forward "MidiPhraseDuration" nil t)
      (goto-char
       (cscsd-define-macro "MidiPhraseDuration" 'sco ""))
      (insert ";f0 $MidiPhraseDuration.\n")
      (forward-line -2)
      (insert ";")))
  (insert "<Phrase label=\"" name "\">\n")
  (save-excursion 
    (insert (or phrase "''") "\n</Phrase>\n\n"))
;  (when (and (boundp mmm-mode) mmm-mode)
;      (cscsd-turn-mmm-on))
)

(defun cscsd-process-KeyPhrase (keyphrase &optional audioname)
  "Evaluate the KeyPhrase area, write its corresponding midifile
and process the CSD on it"
  (cscsd-process-phrase 'key keyphrase audioname)) 

(defun cscsd-process-mphrase (mphrase &optional audioname)
  "Evaluate the MPhrase area, write its corresponding midifile
and process the CSD on it"
  (cscsd-process-phrase 'mph mphrase audioname)) 

(defun cscsd-play-mphrase (mphrase)
  (let ((cscsd-key-midi-options "-dodac -TF"))
    (cscsd-process-mphrase mphrase)))

(defun cscsd-process-phrase (type phrase &optional audioname)
  "Evaluate the phrase area of TYPE 'key or 'mph named PHRASE, 
write its corresponding midifile and process the CSD on it"
  (let ((midifile (cscsd-make-temp-file "cscsd-" nil ".mid")))
    (cscsd-make-phrase type phrase midifile)
    (cscsd-play-midi-file midifile)))

(defun cscsd-edit-mphrase (&optional label)
  ""
  (interactive "sMPhrase label: ")
  (let ((ped (surmulot-widgets-add 
	      "Phrase Editor" '(MusicalPhraseEditor forSurmulot))))
    (surmulot-widget-do ped
      `(Widget labelForPhrase: ,label))
    (surmulot-widget-do ped
      `((Widget phrase: ,(cscsd-mphrase-constructor label))
	windowAroundMusic))))

(defun cscsd-play-midi-file (filename)
  (cscsd-process (current-buffer) nil filename "$csound -dodac %s -TF %s &"))

(defun cscsd-process-midi-file (filename) 
  ""
  (let* ((rootname (cscsd-make-temp-file "cscsd-")))
    (cscsd-process
     (with-cscsd-copy-for-processing 
	 ((csdfile (concat rootname ".csd"))
	  (rootname rootname))
       (cscsd-set-Options "\n" cscsd-key-midi-options filename "\n")))))

(defun cscsd-make-phrase 
  (type phrase &optional midi-file txt-file k-file port direct)
  (if (eq type 'key)
      (cscsd-make-KeyPhrase phrase midi-file txt-file k-file)
    (cscsd-make-mphrase phrase midi-file txt-file k-file port direct)))

(defun cscsd-make-KeyPhrase (keyphrase &optional midi-file txt-file k-file)
  "Invoke lowkey to process the KEYPHRASE area
if MIDI-FILE, save the resulting KeyPhrase in that file
if TXT-FILE, write KeyPhrase duration there
if K-FILE, save KeyPhrase there in KeyKit format"
  (save-excursion
    (goto-char (point-min))
    (copy-region-as-kill 
     (or (re-search-forward (concat "<KeyPhrase>[ \t]*#+" keyphrase "[ \t#]*$") nil t) ; backward compatibility
	 (re-search-forward (concat "<KeyPhrase label=\"" keyphrase "\">")))
     (progn
       (search-forward "</KeyPhrase>")
       (search-backward "</KeyPhrase>")))
    (with-temp-buffer
      (yank)
      (when midi-file
	(insert "\n\n"
		"writemf(KeyPhrase+'p0v0d" (number-to-string (* 192 cscsd-key-decay)) "',\"" midi-file "\")\n"))
      (when txt-file
	(insert "f=open(\"" txt-file "\",\"w\")\n"
		"put(f,string(" (number-to-string cscsd-key-decay) "+latest(KeyPhrase)/float(seconds(1))))\n"
		"close(f)\n"
		"\n"))
      (when k-file
	(insert "f=open(\"" k-file "\",\"w\")\n"
		"put(f,string(KeyPhrase))\n"
		"close(f)\n"
		"\n"))
      (if (or midi-file txt-file k-file)
	  (kk-run-lowkey "" (point-min) (point-max))
	(insert "\nKeyPhrase\n")
	(kk-eval-with-return (buffer-string))))))

(defun cscsd-make-mphrase 
  (phrase &optional midi-file txt-file k-file port direct)
  "Invoke µO to process the PHRASE area.
If MIDI-FILE, save the resulting mphrase in that file.
TXT-FILE exact value is ignored: if non nil, return PHRASE duration. 
If K-FILE, save mphrase there in KeyKit format.
PORT tells which Squeak subprocess should do the job.
If DIRECT, return PHRASE as a string in Keykit format."
  (funcall 
   (lambda (spec) (squeak-eval (print-smalltalk-to-string spec) port))
   (if midi-file
       `(((,(cscsd-mphrase-constructor phrase) 
	   durationAfterEndTime: ,cscsd-key-decay) 
	  saveToMidiFile: ,midi-file))
     (if k-file
	 `((,(cscsd-mphrase-constructor phrase)
	    modeFree keyPrintString writeToFile: ,k-file))
       (if txt-file
	   `((,(cscsd-mphrase-constructor phrase) duration
	      + ,cscsd-key-decay))
	 (if direct
	     `((,(cscsd-mphrase-constructor phrase)
		modeFree keyPrintString))))))))

(defun cscsd-delete-mphrase (phrase)
  ""
  (save-excursion
    (goto-char (point-min))
    (let ((found (re-search-forward (concat "<M?Phrase label=\"" phrase "\">") nil t)))
      (when found
	(kill-region (re-search-backward "<M?Phrase")
		     (re-search-forward "</M?Phrase>"))))))

(defun cscsd-phrase-to-CsMidifileB (type phrase)
  (let ((filename (cscsd-make-temp-file "tmp" nil ".mid")))
    (cscsd-make-phrase type phrase filename)
    (cscsd-insert-file filename (format "%s.mid" phrase))))

(defun cscsd-get-KeyPhrase (keyphrase)
  "Invoke lowkey and return the KEYPHRASE defined in the corresponding area,
as a string containing its representation in KeyKit format"
  (cscsd-get-phrase 'key keyphrase))

(defun cscsd-get-mphrase (mphrase &optional port)
  "Invoke Squeak and return the MPHRASE defined in the corresponding area,
as a string containing its representation in KeyKit format"
 (cscsd-get-phrase 'mph mphrase port t))

(defun cscsd-get-phrase (type phrase &optional port direct)
  "Return the phrase of TYPE 'key or 'mph defined in the PHRASE area,
as a string containing its representation in KeyKit format"
    (cscsd-make-phrase type phrase nil nil nil port direct))

(defun cscsd-get-MIDIfile (&optional file-name)
  (delete ?\n (lowkey-eval "print(onlynotes(readmf(\"" (or file-name (read-file-name "MIDI file: ")) "\")))")))

(defun cscsd-get-score-from-mphrase (phrase)
  ($$ `[((CsoundScoreFormat fromConsCell: \#,(cscsd-get-format) asCons)
	 readPhrase: ,(cscsd-mphrase-constructor phrase)) scoreString]))

(defun cscsd-mphrase-constructor (phrase)
  "Return the Smalltalk code required to convert PHRASE area contents
into a MusicalPhrase."
  (save-excursion
    (goto-char (point-min))
    (let ((phrase-section
	   (buffer-substring-no-properties
	    (re-search-forward 
	     (concat "<\\(M\\|ABC\\)?Phrase label=\"" phrase "\">"))
	    (progn
	      (re-search-forward "</\\(M\\|ABC\\)?Phrase>")
	      (re-search-backward "</\\(M\\|ABC\\)?Phrase>")))))
      (if (looking-at "</Phrase")
	  `(,phrase-section kphrase)
	(if (looking-at "</ABCPhrase")
	    `((ABCParser toMIDI read: ,phrase-section) asMusicalPhrase)
	  `(Compiler evaluate: ,phrase-section))))))

(defun cscsd-overwrite-score-with-mphrase (phrase)
  (cscsd-overwrite-score (cscsd-get-score-from-mphrase phrase)))

(defun cscsd-process-score-from-mphrase (phrase)
  (cscsd-process-with-score (cscsd-get-score-from-mphrase phrase)))

(defun csound-csd-keyphrases-menu ()       
  "Dynamic \"CSD\" submenu handling <...Phrase> areas"
  (let* (area keyphrases mphrases
	     (formatp (and (featurep 'surmulot) 
			   (cscsd-may-have-format-p)))
	     (midip (not formatp)))
    (when (featurep 'keykit-mode)
      (save-excursion
	(goto-char (point-min))
	(while (re-search-forward "^[ \t]*<KeyPhrase label=\"\\(.*\\)\">" nil t)
	  (setq area (match-string 1))
	  (add-to-list 
	   'keyphrases 		       
	   `(,area
	     ,@(when midip
		 `("Process as MIDI input:"
		   ["With output to DAC" 
		    (let ((cscsd-key-midi-options "-dodac -TF"))
		      (cscsd-process-KeyPhrase ,area)) t]
		   ["With default MIDI options" 
		    (cscsd-process-KeyPhrase ,area) t]
		   "--"
		   ["Insert in CSD as <CsMidiFileB>" 
		    (cscsd-phrase-to-CsMidifileB 'key ,area) t]
		   "--"))
	     "Keykit actions:"
	     ["Display phrase in Group tool"
	      (keykit-do (format "DisplayInWgroup(%s)" 
				 (cscsd-get-KeyPhrase ,area))) t]
	     ["Snarf it" 
	      (keykit-do (format "Snarf=%s" (cscsd-get-KeyPhrase ,area))) t])
	   t))))
    (when (featurep 'surmulot)
      (save-excursion
	(goto-char (point-min))
	(while (re-search-forward 
		"^[ \t]*<\\(M\\|ABC\\)?Phrase label=\"\\(.*\\)\">" nil t)
	  (setq area (match-string 2))
	  (add-to-list 
	   'mphrases 		       
	   `(,area
	     ,@(when midip
		 `("Process as MIDI input:"
		   ["With output to DAC" (cscsd-play-mphrase ,area) t]
		   ["With default MIDI options" (cscsd-process-mphrase ,area) t]
		   "--"
		   ["Insert in CSD as <CsMidiFileB>" 
		    (cscsd-phrase-to-CsMidifileB 'mph ,area) t]
		   "--"))
	     "muO actions:"
	     ["Edit phrase" (cscsd-edit-mphrase ,area) t]
	     ,@(when formatp 
		 `(["Overwrite score with phrase" 
		    (cscsd-overwrite-score-with-mphrase ,area) t]
		   ["Process CSD with phrase as score"
		    (cscsd-process-score-from-mphrase ,area) t])))
	   t))))
    (when (or keyphrases mphrases)
      (list (append '("Musical Phrases") (append keyphrases mphrases))))))
	

;; === this is it.
(provide 'csound-key)

;; csound-key.el ends here




